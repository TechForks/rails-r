# Rails R, written in Bash by Bilawal Hameed.
# Contribute: https://github.com/bih/rails-r
# Released under the MIT license.

function r() 
{ 
    echo "Real setup. Woo."
    return;

    # Shortcuts
    if [ $1 == "con" ]; INPUT="/app/controllers"$2; fi;
    if [ $1 == "mod" ]; INPUT="/app/models"$2; fi;
    if [ $1 == "view" ]; INPUT="/app/views"$2; fi;
    if [ $1 == "views" ]; INPUT="/app/views"$2; fi;
    if [ $1 == "help" ]; INPUT="/app/helpers"$2; fi;
    if [ $1 == "css" ]; INPUT="/app/assets/stylesheets"$2; fi;
    if [ $1 == "js" ]; INPUT="/app/assets/javascripts"$2; fi;
    if [ $1 == "img" ]; INPUT="/app/assets/images"$2; fi;
    if [ $1 == "public" ]; INPUT="/public"$2; fi; # Saves only one character, but that's time that can be used to kick some fresh Java-looking ass. /jk
    if [ $1 == "gems" ]; INPUT="Gemfile"; fi;
    if [ $1 == "readme" ]; INPUT="README*"; fi;
    if [ $1 == "env" ]; INPUT="/config/environments"$2; fi;
    if [ $1 == "initial" ]; INPUT="/config/initializers"$2; fi;
    if [ $1 == "db" ]; INPUT="Gemfile"; fi;
    if [ $1 == "route" ]; INPUT="/config/routes.rb"; fi;
    if [ $1 == "routes" ]; INPUT="/config/routes.rb"; fi;
    if [ $1 == "test" ]; INPUT="/test"$2; fi;
    if [ $1 == "rake" ]; INPUT="Rakefile"; fi;

    if [ $1 == "pre" ];
        bundle exec rake assets:precompile
        return;
    fi;

    if [ $1 == "-pre" ];
        bundle exec rake assets:clean
        bundle exec rake assets:precompile
        return;
    fi;

    if [ $1 == "mig" ];
        bundle exec rake db:migrate
        return;
    fi;

    # Do awesome stuff.
    INPUT="/"$1;
    REPLACE="/";
    INPUT=${INPUT//\/\//$REPLACE};

    if [! [ !type "subl" ] > /dev/null]; then # A
        COMMAND=subl # Sublime, hell yeah
    else if [! [ !type "atom" ] > /dev/null]; then
        COMMAND=atom # Atom support, you say?
    else
        COMMAND=vim # vim rocks!
    fi; # /A
    
    if [ -z $1 ]; then # B
        return; # Folder doesn't exist? Return nothing.
    else
        if [ $1 == "/" ] && [ ! $(git rev-parse --show-cdup) == "" ]; then # C
            cd $(git rev-parse --show-cdup); # Take me back to the root of the project.
        else
            if [ -d ./$1 ]; then # D
                cd ./$1; # Folder exists? Take me there.
            else
                if [ -d $(git rev-parse --show-cdup)"$INPUT" ]; then # E
                    cd $(git rev-parse --show-cdup)"$INPUT"; # Folder exists at root level of Git repo? I like that.
                else
                    if [ -e ./$INPUT ]; then #F
                        COMMAND ./$INPUT; # File exists at relative path? I like this.
                    else
                        if [ -e $(git rev-parse --show-cdup)"$INPUT" ]; then # G
                            COMMAND $(git rev-parse --show-cdup)"$INPUT"; # File exists at root path? Take me there.
                        else
                            return; # Nothing? Return nothing.
                        fi; #/G
                    fi; # /F
                fi; # /E
            fi; # /D
        fi; # /C
    fi; # /B
}